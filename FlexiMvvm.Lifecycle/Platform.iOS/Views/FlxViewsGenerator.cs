// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using System.Threading.Tasks;
using FlexiMvvm.ViewModels;
using FlexiMvvm.ViewModels.Core;
using FlexiMvvm.Views;
using FlexiMvvm.Views.Core;
using UIKit;

namespace FlexiMvvm.Views
{
    public partial class FlxNavigationController : UINavigationController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxNavigationController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxNavigationController<TViewModel> : FlxNavigationController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxNavigationController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxNavigationController<TViewModel, TParameters> : FlxNavigationController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxNavigationController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxNavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxViewController : UIViewController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = true;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxViewController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxViewController<TViewModel> : FlxViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxViewController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxViewController<TViewModel, TParameters> : FlxViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxViewController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxTableViewController : UITableViewController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTableViewController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxTableViewController<TViewModel> : FlxTableViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTableViewController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxTableViewController<TViewModel, TParameters> : FlxTableViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxTableViewController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxCollectionViewController : UICollectionViewController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxCollectionViewController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxCollectionViewController<TViewModel> : FlxCollectionViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxCollectionViewController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxCollectionViewController<TViewModel, TParameters> : FlxCollectionViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxCollectionViewController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxCollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxTabBarController : UITabBarController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTabBarController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxTabBarController<TViewModel> : FlxTabBarController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTabBarController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxTabBarController<TViewModel, TParameters> : FlxTabBarController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxTabBarController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxTabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxPageViewController : UIPageViewController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxPageViewController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxPageViewController<TViewModel> : FlxPageViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxPageViewController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxPageViewController<TViewModel, TParameters> : FlxPageViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxPageViewController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxPageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class FlxSplitViewController : UISplitViewController, IFlxViewController
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        public event EventHandler ViewDidLoadCalled;

        public event EventHandler ViewWillAppearCalled;

        public event EventHandler ViewDidAppearCalled;

        public event EventHandler ViewWillDisappearCalled;

        public event EventHandler ViewDidDisappearCalled;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = false;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxSplitViewController>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
            ViewDidLoadCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
            ViewWillAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            ViewDidAppearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            ViewWillDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
            ViewDidDisappearCalled?.Invoke(this, EventArgs.Empty);
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        public override void DismissViewController(bool animated, Action completionHandler)
        {
            LifecycleDelegate.DismissViewController();

            base.DismissViewController(animated, completionHandler);
        }

        public override Task DismissViewControllerAsync(bool animated)
        {
            LifecycleDelegate.DismissViewController();

            return base.DismissViewControllerAsync(animated);
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class FlxSplitViewController<TViewModel> : FlxSplitViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModel
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxSplitViewController<TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }

    public partial class FlxSplitViewController<TViewModel, TParameters> : FlxSplitViewController, IFlxViewController<TViewModel>
        where TViewModel : class, IViewModelWithParameters<TParameters>, IParametersOwner<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public FlxSplitViewController(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<FlxSplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultSetEventArgs args)
        {
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            ResultSet?.Invoke(this, args);
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void IViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            ViewModel.SetParameters(_parameters);
        }

        Task IViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            return ViewModel.InitializeAsync();
        }
    }
}

