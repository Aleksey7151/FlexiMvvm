// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using System.Threading.Tasks;
using Android.App;
using Android.Content;
using Android.OS;
using FlexiMvvm.Formatters;
using FlexiMvvm.Persistence.Core;
using FlexiMvvm.ViewModels;
using FlexiMvvm.ViewModels.Core;
using JetBrains.Annotations;

namespace FlexiMvvm.Views.Core
{
    public class ViewLifecycleDelegate<TView> : IViewLifecycleDelegate
        where TView : class, IAndroidView
    {
        public ViewLifecycleDelegate([NotNull] TView view)
        {
            View = view ?? throw new ArgumentNullException(nameof(view));
        }

        [NotNull]
        protected TView View { get; }

        public virtual void OnCreate(Bundle savedInstanceState)
        {
        }

        public virtual void OnStart()
        {
        }

        public virtual void OnActivityResult(int requestCode, Android.App.Result resultCode, Intent data)
        {
        }

        public virtual void OnSaveInstanceState(Bundle outState)
        {
        }

        public virtual void OnDestroyView()
        {
        }

        public virtual void OnDestroy()
        {
        }
    }

    public class ViewLifecycleDelegate<TView, TViewModel> : ViewLifecycleDelegate<TView>
        where TView : class, IAndroidView, INavigationView<TViewModel>, IViewModelOwner<TViewModel>
        where TViewModel : class, IViewModel, IStateOwner
    {
        private const string ViewModelKeyKey = "FlexiMvvm_ViewModelKey";

        [CanBeNull]
        private string _viewModelKey;
        [NotNull]
        private Task _viewModelAsyncInitialization = Task.CompletedTask;

        public ViewLifecycleDelegate([NotNull] TView view)
            : base(view)
        {
        }

        public override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);

            var store = ViewModelStoreProvider.Get(View).NotNull();
            _viewModelKey = savedInstanceState?.GetString(ViewModelKeyKey) ?? Guid.NewGuid().ToString();
            var factory = ViewModelProvider.GetFactory();
            var state = savedInstanceState?.GetState();
            var viewModel = ViewModelProvider.Get<TViewModel>(store, _viewModelKey, factory, state, out var created);

            View.SetViewModel(viewModel);
            ViewCache.Add(View);

            if (created)
            {
                _viewModelAsyncInitialization = View.InitializeViewModelAsync();
            }
        }

        public override async void OnActivityResult(int requestCode, Android.App.Result resultCode, Intent data)
        {
            base.OnActivityResult(requestCode, resultCode, data);

            if (View.ViewModel is IViewModelWithResultHandler viewModelWithResultHandler)
            {
                var resultMapper = View.RequestCode.GetResultMapper(requestCode);

                if (resultMapper != null)
                {
                    await _viewModelAsyncInitialization;
                    viewModelWithResultHandler.HandleResult(resultCode, resultMapper.Map(data));
                }
                else
                {
                    throw new InvalidOperationException($"\"{TypeFormatter.FormatName(View.GetType())}\" view can't handle activity result for \"{requestCode}\" request code. " +
                        $"Check that the request code is generated by \"{TypeFormatter.FormatName<RequestCode>()}.{nameof(RequestCode.GetFor)}\" " +
                        $"method and you call \"{nameof(Activity.StartActivityForResult)}\" method for appropriate activity/fragment.");
                }
            }
            else
            {
                throw new InvalidOperationException($"\"{TypeFormatter.FormatName(View.ViewModel.GetType())}\" view model doesn't implement " +
                    $"\"{TypeFormatter.FormatName<IViewModelWithResultHandler>()}\" interface.");
            }
        }

        public override void OnSaveInstanceState(Bundle outState)
        {
            base.OnSaveInstanceState(outState);

            outState.PutString(ViewModelKeyKey, _viewModelKey);
            outState.PutState(View.ViewModel.ExportState());
        }

        public override void OnDestroy()
        {
            base.OnDestroy();

            var store = ViewModelStoreProvider.Get(View);
            store?.Remove(_viewModelKey.NotNull());
            ViewCache.Remove(View);
        }
    }
}
