// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using UIKit;
using FlexiMvvm.Views.Keyboard;
using System;
using FlexiMvvm.Weak.Delegates;
using FlexiMvvm.Weak.Subscriptions;

namespace FlexiMvvm.Views
{
    public static class KeyboardHandlerWeakEventsSubscriptionsExtensions
    {
        public static IDisposable KeyboardDidHideWeakSubscribe(
            this KeyboardHandler eventSource,
            EventHandler<KeyboardSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<KeyboardHandler, KeyboardSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.KeyboardDidHide += handler,
                (source, handler) => source.KeyboardDidHide -= handler,
                eventHandler);
        }

        public static IDisposable KeyboardDidShowWeakSubscribe(
            this KeyboardHandler eventSource,
            EventHandler<KeyboardSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<KeyboardHandler, KeyboardSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.KeyboardDidShow += handler,
                (source, handler) => source.KeyboardDidShow -= handler,
                eventHandler);
        }

        public static IDisposable KeyboardWillHideWeakSubscribe(
            this KeyboardHandler eventSource,
            EventHandler<KeyboardSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<KeyboardHandler, KeyboardSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.KeyboardWillHide += handler,
                (source, handler) => source.KeyboardWillHide -= handler,
                eventHandler);
        }

        public static IDisposable KeyboardWillShowWeakSubscribe(
            this KeyboardHandler eventSource,
            EventHandler<KeyboardSizeChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<KeyboardHandler, KeyboardSizeChangedEventArgs>(
                eventSource,
                (source, handler) => source.KeyboardWillShow += handler,
                (source, handler) => source.KeyboardWillShow -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    public static class UIBarButtonItemWeakEventsSubscriptionsExtensions
    {
        public static IDisposable ClickedWeakSubscribe(
            this UIBarButtonItem eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UIBarButtonItem>(
                eventSource,
                (source, handler) => source.Clicked += handler,
                (source, handler) => source.Clicked -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    public static class UIControlWeakEventsSubscriptionsExtensions
    {
        public static IDisposable TouchUpInsideWeakSubscribe(
            this UIControl eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UIControl>(
                eventSource,
                (source, handler) => source.TouchUpInside += handler,
                (source, handler) => source.TouchUpInside -= handler,
                eventHandler);
        }

        public static IDisposable ValueChangedWeakSubscribe(
            this UIControl eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UIControl>(
                eventSource,
                (source, handler) => source.ValueChanged += handler,
                (source, handler) => source.ValueChanged -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    public static class UIPageViewControllerWeakEventsSubscriptionsExtensions
    {
        public static IDisposable DidFinishAnimatingWeakSubscribe(
            this UIPageViewController eventSource,
            EventHandler<UIPageViewFinishedAnimationEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UIPageViewController, UIPageViewFinishedAnimationEventArgs>(
                eventSource,
                (source, handler) => source.DidFinishAnimating += handler,
                (source, handler) => source.DidFinishAnimating -= handler,
                eventHandler);
        }

    }
}

namespace FlexiMvvm.Views
{
    public static class UITextFieldWeakEventsSubscriptionsExtensions
    {
        public static IDisposable EditingChangedWeakSubscribe(
            this UITextField eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UITextField>(
                eventSource,
                (source, handler) => source.EditingChanged += handler,
                (source, handler) => source.EditingChanged -= handler,
                eventHandler);
        }

        public static IDisposable EndedWeakSubscribe(
            this UITextField eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UITextField>(
                eventSource,
                (source, handler) => source.Ended += handler,
                (source, handler) => source.Ended -= handler,
                eventHandler);
        }

        public static IDisposable StartedWeakSubscribe(
            this UITextField eventSource,
            EventHandler eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new WeakEventSubscription<UITextField>(
                eventSource,
                (source, handler) => source.Started += handler,
                (source, handler) => source.Started -= handler,
                eventHandler);
        }

    }
}

