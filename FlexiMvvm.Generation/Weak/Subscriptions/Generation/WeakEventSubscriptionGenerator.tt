<#@ template visibility="internal" language="C#" #>
private sealed class <#= GetWeakEventSubscriptionClassName(TypeClassName, TypeEventGenerationOptions) #> : WeakEventSubscriptionBase<<#= TypeClassName #>, <#= TypeEventGenerationOptions.EventArgsClassName #>>
{
    private readonly Action<<#= TypeClassName #>, <#= TypeEventGenerationOptions.EventHandlerClassName #>> _subscribeToEvent;
    private readonly Action<<#= TypeClassName #>, <#= TypeEventGenerationOptions.EventHandlerClassName #>> _unsubscribeFromEvent;
    private readonly WeakEventHandler<<#= TypeEventGenerationOptions.EventArgsClassName #>> _weakEventHandler;

    public <#= GetWeakEventSubscriptionClassName(TypeClassName, TypeEventGenerationOptions) #>(
        <#= TypeClassName #> eventSource,
        Action<<#= TypeClassName #>, <#= TypeEventGenerationOptions.EventHandlerClassName #>> subscribeToEvent,
        Action<<#= TypeClassName #>, <#= TypeEventGenerationOptions.EventHandlerClassName #>> unsubscribeFromEvent,
        EventHandler<<#= TypeEventGenerationOptions.EventArgsClassName #>> eventHandler)
        : base(eventSource)
    {
        if (subscribeToEvent == null)
            throw new ArgumentNullException(nameof(subscribeToEvent));
        if (unsubscribeFromEvent == null)
            throw new ArgumentNullException(nameof(unsubscribeFromEvent));
        if (eventHandler == null)
            throw new ArgumentNullException(nameof(eventHandler));

        _subscribeToEvent = subscribeToEvent;
        _unsubscribeFromEvent = unsubscribeFromEvent;
        _weakEventHandler = new WeakEventHandler<<#= TypeEventGenerationOptions.EventArgsClassName #>>(eventHandler);

        SubscribeToEvent();
    }

    protected override void SubscribeToEvent(<#= TypeClassName #> eventSource)
    {
        if (eventSource == null)
            throw new ArgumentNullException(nameof(eventSource));

        _subscribeToEvent(eventSource, OnSourceEvent);
    }

    protected override void UnsubscribeFromEvent(<#= TypeClassName #> eventSource)
    {
        if (eventSource == null)
            throw new ArgumentNullException(nameof(eventSource));

        _unsubscribeFromEvent(eventSource, OnSourceEvent);
    }

    protected override bool TryInvokeEventHandler(object sender, <#= TypeEventGenerationOptions.EventArgsClassName #> e)
    {
        if (_weakEventHandler.TryGetTarget(out var target))
        {
            _weakEventHandler.Invoke(target, sender, e);

            return true;
        }

        return false;
    }
}
