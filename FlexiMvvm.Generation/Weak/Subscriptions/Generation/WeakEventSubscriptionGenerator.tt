<#@ template visibility="internal" language="C#" #>
private sealed class <#= GetClassName() #> : <#= GetBaseClassName() #>
    where TEventSource : class
{
    private readonly Action<TEventSource, <#= GetOriginEventHandlerDeclarationName() #>> _subscribeToEvent;
    private readonly Action<TEventSource, <#= GetOriginEventHandlerDeclarationName() #>> _unsubscribeFromEvent;

    public <#= GetClassName().WithoutGenericPart() #>(
        TEventSource eventSource,
        Action<TEventSource, <#= GetOriginEventHandlerDeclarationName() #>> subscribeToEvent,
        Action<TEventSource, <#= GetOriginEventHandlerDeclarationName() #>> unsubscribeFromEvent,
        <#= GetPassedEventHandlerDeclarationName() #> eventHandler)
        : base(eventSource, eventHandler)
    {
        _subscribeToEvent = subscribeToEvent ?? throw new ArgumentNullException(nameof(subscribeToEvent));
        _unsubscribeFromEvent = unsubscribeFromEvent ?? throw new ArgumentNullException(nameof(unsubscribeFromEvent));

        SubscribeToEvent();
    }

    protected override void SubscribeToEvent(TEventSource eventSource)
    {
        if (eventSource == null)
            throw new ArgumentNullException(nameof(eventSource));

        _subscribeToEvent(eventSource, OnSourceEvent);
    }

    protected override void UnsubscribeFromEvent(TEventSource eventSource)
    {
        if (eventSource == null)
            throw new ArgumentNullException(nameof(eventSource));

        _unsubscribeFromEvent(eventSource, OnSourceEvent);
    }
}
