<#
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================
#>
<#@ template language="C#" #>
using System;
using FlexiMvvm.Weak.Subscriptions;
<# foreach (var typeExtensionsGenerationOptions in TypesExtensionsGenerationOptions) { #>

namespace <#= GetNamespace(typeExtensionsGenerationOptions) #>
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="<#= typeExtensionsGenerationOptions.ClassName #>"/> class events.</summary>
<#  if (!string.IsNullOrWhiteSpace(typeExtensionsGenerationOptions.ObsoleteDescription)) {
        if (!string.IsNullOrWhiteSpace(typeExtensionsGenerationOptions.ObsoleteIfPreprocessorDirective)) { #>
#if <#= typeExtensionsGenerationOptions.ObsoleteIfPreprocessorDirective #>
<#      } #>
    [Obsolete("<#= typeExtensionsGenerationOptions.ObsoleteDescription #>")]
<#      if (!string.IsNullOrWhiteSpace(typeExtensionsGenerationOptions.ObsoleteIfPreprocessorDirective)) { #>
#endif
<#      } #>
<#  } #>
    public static class <#= GetClassName(typeExtensionsGenerationOptions) #>
    {
<#      foreach (var typeEventGenerationOptions in typeExtensionsGenerationOptions.TypeEventsGenerationOptions) {
            if (!string.IsNullOrWhiteSpace(typeEventGenerationOptions.IfPreprocessorDirective)) { #>
#if <#= typeEventGenerationOptions.IfPreprocessorDirective #>
<#          } #>
        /// <summary>Weak subscription on <see cref="<#= typeExtensionsGenerationOptions.ClassName #>.<#= typeEventGenerationOptions.EventName #>"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="<#= typeExtensionsGenerationOptions.ClassName #>.<#= typeEventGenerationOptions.EventName #>"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
<#      if (!string.IsNullOrWhiteSpace(typeEventGenerationOptions.ObsoleteDescription)) {
            if (!string.IsNullOrWhiteSpace(typeEventGenerationOptions.ObsoleteIfPreprocessorDirective)) { #>
#if <#= typeEventGenerationOptions.ObsoleteIfPreprocessorDirective #>
<#          } #>
        [Obsolete("<#= typeEventGenerationOptions.ObsoleteDescription #>")]
<#          if (!string.IsNullOrWhiteSpace(typeEventGenerationOptions.ObsoleteIfPreprocessorDirective)) { #>
#endif
<#          } #>
<#      } #>
        public static IDisposable <#= typeEventGenerationOptions.EventName #>WeakSubscribe(
<#          if (typeEventGenerationOptions.IsStaticEvent) { #>
            <#= typeExtensionsGenerationOptions.ClassName #> eventSource,
<#          } else { #>
            this <#= typeExtensionsGenerationOptions.ClassName #> eventSource,
<#          } #>
            <#= GetPassedEventHandlerDeclarationName(typeEventGenerationOptions) #> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new <#= GetWeakEventSubscriptionClassName(typeExtensionsGenerationOptions.ClassName, typeEventGenerationOptions) #>(
                eventSource,
                (source, handler) => source.<#= typeEventGenerationOptions.EventName #> += handler,
                (source, handler) => source.<#= typeEventGenerationOptions.EventName #> -= handler,
                eventHandler);
        }
<#          if (!string.IsNullOrWhiteSpace(typeEventGenerationOptions.IfPreprocessorDirective)) { #>
#endif
<#          } #>

<# } #>
<#  foreach (var typeEventWithCustomEventHandlerGenerationOptions in typeExtensionsGenerationOptions.TypeEventsWithCustomEventHandlerGenerationOptions) {
    var weakEventSubscriptionGenerator = new WeakEventSubscriptionGenerator(typeEventWithCustomEventHandlerGenerationOptions);
    weakEventSubscriptionGenerator.PushIndent("    ");
    weakEventSubscriptionGenerator.PushIndent("    "); #>
<#= weakEventSubscriptionGenerator.TransformText() #>
<# } #>
    }
}
<# } #>
